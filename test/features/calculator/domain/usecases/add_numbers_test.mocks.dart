// Mocks generated by Mockito 5.4.6 from annotations
// in string_calculator_kata/test/features/calculator/domain/usecases/add_numbers_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:string_calculator_kata/core/errors/failures.dart' as _i5;
import 'package:string_calculator_kata/features/calculator/domain/entities/calculation.dart'
    as _i7;
import 'package:string_calculator_kata/features/calculator/domain/entities/calculation_result.dart'
    as _i6;
import 'package:string_calculator_kata/features/calculator/domain/repositories/calculator_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [CalculatorRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCalculatorRepository extends _i1.Mock
    implements _i3.CalculatorRepository {
  MockCalculatorRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.CalculationResult>> addNumbers(
    String? input,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#addNumbers, [input]),
            returnValue:
                _i4.Future<
                  _i2.Either<_i5.Failure, _i6.CalculationResult>
                >.value(
                  _FakeEither_0<_i5.Failure, _i6.CalculationResult>(
                    this,
                    Invocation.method(#addNumbers, [input]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.CalculationResult>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i7.Calculation>>>
  getCalculationHistory() =>
      (super.noSuchMethod(
            Invocation.method(#getCalculationHistory, []),
            returnValue:
                _i4.Future<
                  _i2.Either<_i5.Failure, List<_i7.Calculation>>
                >.value(
                  _FakeEither_0<_i5.Failure, List<_i7.Calculation>>(
                    this,
                    Invocation.method(#getCalculationHistory, []),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i7.Calculation>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> saveCalculation(
    _i7.Calculation? calculation,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#saveCalculation, [calculation]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
              _FakeEither_0<_i5.Failure, void>(
                this,
                Invocation.method(#saveCalculation, [calculation]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> clearHistory() =>
      (super.noSuchMethod(
            Invocation.method(#clearHistory, []),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
              _FakeEither_0<_i5.Failure, void>(
                this,
                Invocation.method(#clearHistory, []),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> validateInput(String? input) =>
      (super.noSuchMethod(
            Invocation.method(#validateInput, [input]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
              _FakeEither_0<_i5.Failure, bool>(
                this,
                Invocation.method(#validateInput, [input]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, bool>>);

  @override
  List<String> getExamples() =>
      (super.noSuchMethod(
            Invocation.method(#getExamples, []),
            returnValue: <String>[],
          )
          as List<String>);
}
